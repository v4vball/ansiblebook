
==CMD PyCharm plugin
Select folder in project, right click then "Run CMD Shell"


==== save file and folder structures into tree structure 

https://sourceforge.net/projects/unxutils/


adding a directory to PATH environment variable 
setx PATH "%PATH%;C:\Tools\UnxUtils\"     -- at User level 
setx PATH "%PATH%;C:\Tools\UnxUtils\" /M  -- at System level 


tree /f /a > chapter01.lst


===========  Vagrant

Vagrant is an open-source tool used for creating and managing virtual development environments. It provides a simple and consistent workflow to set up and configure virtual machines (VMs) that closely mirror the target production environment. Here are some key functionalities and purposes of Vagrant:

Provisioning: Vagrant allows you to define the configuration of your development environment using a declarative language called Vagrantfile. You can specify details such as the base operating system, networking, shared folders, and software installations. Vagrant can then automatically provision and configure the VM based on this configuration, ensuring consistent and reproducible environments for developers.

Virtual Machine Management: Vagrant abstracts the underlying virtualization technologies like VirtualBox, VMware, or Docker and provides a unified interface to manage VMs. You can create, start, stop, suspend, and destroy VMs with simple commands. This simplifies the process of managing and sharing development environments across teams.

Environment Isolation: Vagrant enables developers to work in isolated and self-contained environments. Each project can have its own Vagrant configuration, allowing multiple developers to work on different projects simultaneously without conflicts. It helps avoid issues related to dependency clashes, software version inconsistencies, and environmental discrepancies.

Collaboration and Reproducibility: Vagrant makes it easy to share and distribute development environments among team members. The Vagrantfile and associated provisioning scripts can be version-controlled and shared via source code repositories. This ensures that everyone on the team is working with the same environment, reducing the "it works on my machine" problem.

Cross-Platform Compatibility: Vagrant supports various operating systems, allowing developers to create and manage VMs on different platforms, including Windows, macOS, and Linux. This makes it convenient to replicate development environments across different machines and operating systems.

Integrations and Ecosystem: Vagrant integrates with other tools and technologies such as configuration management tools (e.g., Ansible, Chef, Puppet), cloud providers (e.g., AWS, Azure), and development frameworks (e.g., Docker). It provides a wide range of plugins and extensions that extend its functionality and adaptability to different use cases.

default SSH USR\PWS vagrant





=== Vagrantfile file and .vagrant folder explained 

When you initialize a Vagrant project using the vagrant init command, Vagrant creates a Vagrantfile in the project directory. The .vagrant folder is automatically created alongside the Vagrantfile.

The .vagrant folder contains various files and subdirectories that Vagrant uses to manage the VM and its state. These files may include information about the VM's configuration, networking, synced folders, provisioners, and more. The specific contents and structure of the .vagrant folder may vary depending on the version of Vagrant and the configuration of your project.

It's worth noting that the .vagrant folder is typically excluded from version control systems like Git, as its contents can be regenerated or specific to your local development environment. By excluding the .vagrant folder, you avoid unnecessary changes in your version control repository and allow each developer to manage their own Vagrant environment independently.

If you delete the .vagrant folder, Vagrant will regenerate it the next time you run a Vagrant command within the project directory.



configuration file used by Vagrant, a tool for building and managing virtual machine environments. It is written in Ruby and specifies the settings, provisioning instructions, and other configuration details for a Vagrant environment.

The Vagrantfile serves as the blueprint for creating and configuring virtual machines (VMs) using Vagrant. It defines the following aspects of the VM environment:

	Box: Specifies the base operating system image (box) for the VM. This could be a pre-built box provided by Vagrant or a custom box created by the user.

	Network Configuration: Defines the network settings for the VM, such as port forwarding, private networks, and host-only networks.

	Provisioning: Specifies the provisioning instructions for setting up the VM. This can include shell scripts, configuration management tools (such as Ansible, Chef, or Puppet), or other methods to install and configure software within the VM.

	Synced Folders: Determines the folders on the host machine that are synced with the VM, allowing files to be shared between the host and the VM.

	Provider Configuration: Configures the virtualization provider, such as VirtualBox, VMware, or Hyper-V, and specifies additional provider-specific settings.

Once the Vagrantfile is created, you can use the vagrant up command to create and provision the VM based on the configuration specified in the file. Vagrant will read the Vagrantfile and set up the VM accordingly, creating a development or testing environment that closely matches the desired configuration.


config.ssh.forward_agent = true
The line config.ssh.forward_agent = true in a Vagrantfile enables SSH agent forwarding for the Vagrant virtual machine.

When SSH agent forwarding is enabled in Vagrant, it allows the virtual machine to use the SSH agent running on the host machine (the machine running Vagrant) for authentication purposes. This means that any SSH connections made from within the virtual machine can leverage the SSH keys stored on the host machine without needing to copy or transfer the private keys to the virtual machine itself.


config.json


----!!! run the following commands to either to create a Vagrantfile file or in a fold with Vagrantfile already exists.

vagrant box add ubuntu/focal64

vagrant plugin install vagrant-vbguest

vagrant init ubuntu/focal64 (this will trigger "vagrant box add ", if ubuntu doesn't exist )

vagrant up (or using VB to start VM)

vagrant ssh-config

Host default
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile "E:/OneDrive/Favorites/Documents/Git Repo/ansiblebook/chapter01/.vagrant/machines/default/virtualbox/private_key"
  IdentitiesOnly yes
  LogLevel FATAL

vagrant ssh --vagrant ssh into virtual box 

vagrant halt

vagrant destroy -f



====== Different ways to SSH

1) vagrant ssh

2) Putty
	2.1 using PuttyGen load private key, then save it to .ppk format
	2.2 Config Putty session using following settings

	Localhost with port 2222 
	on the left panel of Putty
	Connection-->Data-->Auto-login username: Vagrant
	Connection-->SSH--->Auth---->Private key file for authentication ----Choose private key .ppk file location 
	go back to Session , save before "Open"
     
    2.3 For WinSCP
    Localhost with port 2222
    User Name: vagrant
    Advanced --- > left Panel SSH ---->Authentication ---Private key file -Choose private key .ppk file location 


ssh vagrant@127.0.0.1 -p 2222 -i .vagrant/machines/default/virtualbox/private_key

3) using username and password

sudo nano /etc/ssh/sshd_config 
uncomment  #PasswordAuthentication yes
restarting SSH by running  

sudo service ssh restart

sudo service ssh status


sshpass -p 121121 ssh -p 2223 v4vball@127.0.0.1:2223

$ ssh -p 2223 v4vball@127.0.0.1
The authenticity of host '[127.0.0.1]:2223 ([127.0.0.1]:2223)' can't be established.
ED25519 key fingerprint is SHA256:wCj5tNDMBWRj5pAQkvlpWFI23X8dyLt4+vSM2wGMcGY.
This key is not known by any other names.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '[127.0.0.1]:2223' (ED25519) to the list of known hosts.
v4vball@127.0.0.1's password:
Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.10.16.3-microsoft-standard-WSL2 x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

Last login: Mon May 29 22:53:49 2023 from 127.0.0.1
v4vball@Blackmagic:~$




===== SSH host keys issue when run SSH command

error  received when running 

ssh vagrant@127.0.0.1 -p 2222 -i .vagrant/machines/default/virtualbox/private_key


IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:cyubrPY1k2FA7dhgSlNt898ed9V2CnKrhVsAA8wmiR0.
Please contact your system administrator.


--verify host public key fingerprint 

PS E:\OneDrive\Favorites\Documents\Git Repo\ansiblebook\chapter01> ssh-keygen -l -f C:\Users\baymi\.ssh\known_hosts
256 SHA256:iPAMLB5Xo5IPoyBdZbjtSjdvA/cgDYLRdWbOzzThpb0 [127.0.0.1]:2222 (ECDSA)
2048 SHA256:1YtEA18or6MI0VQnVQn7ZUCtFVkJMRStN+DnqJZaxPk 204.90.115.200 (RSA)

--- solution
1) delete the existing entry point, retype SSH command, the entry will be rebuilt after confirmation 
2) retrieve remote host SSH public key by running 
ssh-keyscan -p 2222 -t ecdsa-sha2-nistp256 127.0.0.1
# 127.0.0.1:2222 SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.7
[127.0.0.1]:2222 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBI51vZBPFZ19cwx246cY7aEPwvSoORAtO84r59A0JgTAgfITM7p+QXCfbvYJKpcslTivZ1gDvQxiJC1uIQO84pA=

then update the corresponding entry (host+port) using last line above




SSH host keys are a crucial component of the SSH protocol's security infrastructure. They are used to verify the authenticity and integrity of a remote server during an SSH connection.

When an SSH client connects to a remote server for the first time, the server presents its host key to the client. The client then checks the server's host key against its local database, typically stored in the known_hosts file. If the host key matches, the client proceeds with the connection, knowing that it is communicating with the correct server. If the host key does not match or is not found in the known_hosts file, the client displays a warning or error message to alert the user about a potential security risk.

SSH host keys come in different types, such as RSA, DSA, ECDSA, and ED25519. These keys are generated on the server side and consist of a public key and a private key pair. The server's public key is stored in the known_hosts file on client machines, while the corresponding private key is kept securely on the server.

The first time you connect to a remote server, your SSH client prompts you to confirm the authenticity of the server's host key. This is known as the "SSH key fingerprint." The fingerprint is a unique representation of the server's public key and can be used to verify its authenticity. It is displayed in a format like SHA256:3f:d0:41:79:8a:7b:1c:8b:46:99:83:67:47:3d:65:0e.

By comparing the received fingerprint with a trusted source (such as the server administrator), you can confirm that the server's host key is legitimate and not subject to tampering or impersonation. Once the fingerprint is verified, the SSH client adds the server's host key to the known_hosts file for future reference.

It's important to pay attention to host key warnings or errors, as they can indicate potential security threats. If you encounter host key-related errors or mismatched fingerprints, it is recommended to investigate further to ensure the integrity of the SSH connection and protect against possible man-in-the-middle attacks.



=========== 






=== Virtual box

using right Ctrl key to quit the cursor in VM
Right Ctrl +F to quit full screen.



========== Ubuntu versions

Ubuntu 21.10 (Impish Indri) - Released on October 14, 2021
Ubuntu 21.04 (Hirsute Hippo) - Released on April 22, 2021
Ubuntu 20.10 (Groovy Gorilla) - Released on October 22, 2020
Ubuntu 20.04 LTS (Focal Fossa) - Released on April 23, 2020
Ubuntu 19.10 (Eoan Ermine) - Released on October 17, 2019
Ubuntu 19.04 (Disco Dingo) - Released on April 18, 2019
Ubuntu 18.10 (Cosmic Cuttlefish) - Released on October 18, 2018
Ubuntu 18.04 LTS (Bionic Beaver) - Released on April 26, 2018
Ubuntu 17.10 (Artful Aardvark) - Released on October 19, 2017
Ubuntu 17.04 (Zesty Zapus) - Released on April 13, 2017
Ubuntu 16.10 (Yakkety Yak) - Released on October 13, 2016
Ubuntu 16.04 LTS (Xenial Xerus) - Released on April 21, 2016
Ubuntu 15.10 (Wily Werewolf) - Released on October 22, 2015
Ubuntu 15.04 (Vivid Vervet) - Released on April 23, 2015
Ubuntu 14.10 (Utopic Unicorn) - Released on October 23, 2014
Ubuntu 14.04 LTS (Trusty Tahr) - Released on April 17, 2014
Ubuntu 13.10 (Saucy Salamander) - Released on October 17, 2013
Ubuntu 13.04 (Raring Ringtail) - Released on April 25, 2013
Ubuntu 12.10 (Quantal Quetzal) - Released on October 18, 2012
Ubuntu 12.04 LTS (Precise Pangolin) - Released on April 26, 2012



============= DOS Dir
dir /od /tw  -- modify time
dir /od /tc  --creation time

DIR [drive:][path][filename] [/A[[:]attributes]] [/B] [/C] [/D] [/L] [/N]
  [/O[[:]sortorder]] [/P] [/Q] [/R] [/S] [/T[[:]timefield]] [/W] [/X] [/4]

  [drive:][path][filename]
              Specifies drive, directory, and/or files to list.

  /A          Displays files with specified attributes.
  attributes   D  Directories                R  Read-only files
               H  Hidden files               A  Files ready for archiving
               S  System files               I  Not content indexed files
               L  Reparse Points             O  Offline files
               -  Prefix meaning not
  /B          Uses bare format (no heading information or summary).
  /C          Display the thousand separator in file sizes.  This is the
              default.  Use /-C to disable display of separator.
  /D          Same as wide but files are list sorted by column.
  /L          Uses lowercase.
  /N          New long list format where filenames are on the far right.
  /O          List by files in sorted order.
  sortorder    N  By name (alphabetic)       S  By size (smallest first)
               E  By extension (alphabetic)  D  By date/time (oldest first)
               G  Group directories first    -  Prefix to reverse order
  /P          Pauses after each screenful of information.
  /Q          Display the owner of the file.
  /R          Display alternate data streams of the file.
  /S          Displays files in specified directory and all subdirectories.
  /T          Controls which time field displayed or used for sorting
  timefield   C  Creation
              A  Last Access
              W  Last Written
  /W          Uses wide list format.
  /X          This displays the short names generated for non-8dot3 file
              names.  The format is that of /N with the short name inserted
              before the long name. If no short name is present, blanks are
              displayed in its place.
  /4          Displays four-digit years





============== To display Unix logs on Ubuntu and check for failed login attempts,  
sudo cat /var/log/auth.log | grep "Invalid"


vagrant@ubuntu-focal:~$ id
uid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant)

-- who is in sudo group
vagrant@ubuntu-focal:~$ getent group sudo
sudo:x:27:ubuntu

-- check if a user is in sudo or wheel groups, which can grants sudo privileges.
vagrant@ubuntu-focal:~$ groups vagrant
vagrant : vagrant           

If the output includes sudo or wheel, it indicates that the user is a member of the respective group that typically grants sudo privileges.


sudo -l -U vagrant
vagrant@ubuntu-focal:~$ sudo -l -U vagrant
Matching Defaults entries for vagrant on ubuntu-focal:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User vagrant may run the following commands on ubuntu-focal:
    (ALL) NOPASSWD: ALL  --------------- !!!!vagrant is not in sudo or wheel group, but he can run sudo commands in order to  run all commands

(ALL): Specifies that the user can run commands as any user or any group.
NOPASSWD:: Indicates that the user is not prompted for a password when using sudo.
ALL: Grants the user permission to run any command with sudo.



============== Install WSL2 and Ubuntu
Windows 10 version 21H1, 21H2, or 22H2, or on Windows 11 21H2 with all of the November updates applied.

Open PowerShell as Admin

1) wsl --install (WSL will enable all system features required and it will download and install Ubuntu)


2) You will also require the optional Windows Subsystem for Linux component if you wish to also use WSL 1 alongside WSL 2.
 2.1) adding enable-wsl1 to the command above 
 2.2)dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart


3)wsl --set-default-version 2

4) wsl --list --verbose

5) change WSL version if needed
wsl --set-version debian 2

6) start Ubuntu
wsl

or other distribution using 
wsl -d <distribution name=""></distribution>


7) upgrade and update, must run,  otherwise, python3-pip won't be found 
sudo apt-get update -y && sudo apt-get upgrade -y

8) install  xrdp (X Remote Desktop Protocol) and xfce4 (Xfce Desktop Environment):

following https://hub.tcno.co/windows/wsl/desktop-gui/


sudo apt install -y xrdp xfce4 xfce4-goodies

sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bak
sudo sed -i 's/3389/3390/g' /etc/xrdp/xrdp.ini
sudo sed -i 's/max_bpp=32/#max_bpp=32\nmax_bpp=128/g' /etc/xrdp/xrdp.ini
sudo sed -i 's/xserverbpp=24/#xserverbpp=24\nxserverbpp=128/g' /etc/xrdp/xrdp.ini
echo xfce4-session > ~/.xsession

Run sudo nano /etc/xrdp/startwm.sh, then comment out the following lines by placing a # before them: test -x /etc/x11... and the next line; echo /bin/sh /etc/x11...
Now, add the following on a new line at the very end: startxfce4
Save and close with Ctrl+S, Ctrl+X.

Start RDP with: sudo /etc/init.d/xrdp start.
Now, open Remote Desktop on your Windows host machine, and connect to localhost:3390.

9) to stop wsl --shutdown


9) Install python , pip, ansible packages 

sudo apt-get install python3-pip git libffi-dev libssl-dev -y
pip3 install --user ansible==2.9.2   (pip3 install --user ansible, this will install the latest full version)

10) when you want to work with Windows systems and Docker, then you install these two Python libraries:
pip3 install pywinrm docker


11) dealing with alerts after the Ansible package installation 

 "The script ansible-community is installed in '/home/v4vball/.local/bin' which is not on PATH"

Open your terminal.

Run the following command to open your user's bash profile in a text editor:

nano ~/.bashrc
Scroll to the end of the file and add the following line:

export PATH="$HOME/.local/bin:$PATH"
This line adds the directory /home/v4vball/.local/bin to the PATH environment variable, which allows executables installed in that directory to be found when you run commands.

Save the file by pressing Ctrl + X, then Y, and finally Enter to confirm.

Close and reopen your terminal or run the following command to apply the changes to the current session:

source ~/.bashrc

After completing these steps, the directory /home/v4vball/.local/bin will be added to your PATH, and the alert regarding the ansible-community script not being on the PATH should no longer appear.


12) verification 

v4vball@Blackmagic:/mnt/c/WSL2$ ansible --version
ansible [core 2.14.6]
  config file = None
  configured module search path = ['/home/v4vball/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
  ansible python module location = /home/v4vball/.local/lib/python3.10/site-packages/ansible
  ansible collection location = /home/v4vball/.ansible/collections:/usr/share/ansible/collections
  executable location = /home/v4vball/.local/bin/ansible
  python version = 3.10.6 (main, Mar 10 2023, 10:55:28) [GCC 11.3.0] (/usr/bin/python3)
  jinja version = 3.1.2
  libyaml = True




wsl --list --verbose
wsl
cd '/mnt/c/ansiblebook/chapter01'


=== SSH

$ sudo nano /etc/ssh/ssh_config
uncomment  this line ---> #   PasswordAuthentication yes



Ubuntu SSH_CONFIG

/etc/ssh/ssh_config.d/*.conf

trouble shoot SSH

sudo apt install net-tools

sudo apt install nmap

nmap -p 22 localhost
------------------------
PORT   STATE  SERVICE
22/tcp closed ssh          -------------------> suggesting SSH server is not installed.


1)sudo apt install openssh-server


2) sudo service ssh start

!!! sudo systemctl start ssh won't work
will receive error "System has not been booted with systemd as init system (PID 1). Can't operate"
This error commonly occurs when using Windows Subsystem for Linux (WSL) or other environments that do not have a full systemd implementation.

cd '/mnt/c/ansiblebook/chapter01'
ssh vagrant@127.0.0.1 -p 2222 -i .vagrant/machines/default/virtualbox/private_key


cd '/cygdrive/c/ansiblebook/chapter01'
 


sudo service ssh status  (q to quit)



====== Cygwin

--- install package using apt-cyg utility
1) install apt-cyg utility prerequisites using Cygwin windows installer.
bash , wget ,  tar , gawk , bzip2 , lynx


2)  lynx -source rawgit.com/transcode-open/apt-cyg/master/apt-cyg > apt-cyg
    install apt-cyg /bin

3) apt-cyg install nano

apt-cyg install tree

 --- cygpath
 cygpath preinstalled tool
 cygpath -u 'C:\ansiblebook\chapter01\playbooks'

============== Chapter 1 

cd '/cygdrive/c/ansiblebook/chapter01'
ssh vagrant@127.0.0.1 -p 2222 -i .vagrant/machines/default/virtualbox/private_key
cp -r /cygdrive/c/ansiblebook/chapter01/.vagrant  /cygdrive/c/ansiblebook/chapter01/playbooks
cd /cygdrive/c/ansiblebook/chapter01/playbooks

ansible testserver -i inventory/vagrant.ini -m ping

ansible testserver -m ping

ansible testserver -b -a "tail /var/log/syslog"   --a or --args: Specifies the argument(s) to be passed to the command being executed.

ansible testserver -b -m package -a name=nginx





============== Chapter 2 (code in chapter 1)

$ vagrant init ubuntu/focal64
$ vagrant up
$ vagrant ssh



====port-forwarding and Private IP

Forward local machine port to vagrant VM port 80 or 433,  this allows VM acts like a regular host using port 80 and 433


# Vagrantfile
VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
# Other config options not shown
config.vm.network :forwarded_port, host: 8000, guest: 80
config.vm.network :forwarded_port, host: 8443, guest: 443
end

---- Assign Private IP
# Vagrantfile
VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
# Other config options not shown
config.vm.network "private_network", ip: "192.168.33.10"
end


==== Agent Forwarding (enabled on the connection between myself and a remote server might need to access some other server  requires my credentials)

Connect to a remote server with agent forwarding: When you establish an SSH connection to a remote server using the -A or -o ForwardAgent=yes option, you enable agent forwarding for that connection.

remote server needs to access Git server via SSH using my private key. 




============ running setup module to 

ansible 127.0.0.1 -m setup -e 'ansible_port=2223 ansible_user=v4vball ansible_password=121121 ansible_connection=ssh ansible_python_interpreter=/usr/bin/python3'


check on Ubuntu 

which python   ---->  return no result
which python3  ----> /usr/bin/python3


 the ansible_python_interpreter variable does have a default value in Ansible. The default value is set based on the target system's operating system and is automatically determined by Ansible.

For most Linux distributions, the default value is /usr/bin/python. This assumes that the target system has Python 2 installed at /usr/bin/python.
